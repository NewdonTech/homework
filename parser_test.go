package tests

import (
	"encoding/binary"
	"errors"
	"github.com/stretchr/testify/assert"
	"strings"
	"testing"
)

type Cases struct {
	Name      string
	Payload   []byte
	Result    string
	ResultRaw []byte
}

func Test_query(t *testing.T) {
	cases := []Cases{
		{
			Name:      "SQLPLUS tools connect packet with select sql",
			Payload:   []byte{1, 75, 0, 0, 6, 0, 0, 0, 0, 0, 3, 94, 6, 97, 128, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 23, 1, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 13, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 83, 69, 76, 69, 67, 84, 32, 68, 69, 67, 79, 68, 69, 40, 85, 83, 69, 82, 44, 32, 39, 88, 83, 36, 78, 85, 76, 76, 39, 44, 32, 32, 88, 83, 95, 83, 89, 83, 95, 67, 79, 78, 84, 69, 88, 84, 40, 39, 88, 83, 36, 83, 69, 83, 83, 73, 79, 78, 39, 44, 39, 85, 83, 69, 82, 78, 65, 77, 69, 39, 41, 44, 32, 85, 83, 69, 82, 41, 32, 70, 82, 79, 77, 32, 83, 89, 83, 46, 68, 85, 65, 76, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			Result:    "SELECT DECODE(USER, 'XS$NULL',  XS_SYS_CONTEXT('XS$SESSION','USERNAME'), USER) FROM SYS.DUAL",
			ResultRaw: []byte("SELECT DECODE(USER, 'XS$NULL',  XS_SYS_CONTEXT('XS$SESSION','USERNAME'), USER) FROM SYS.DUAL"),
		},
		{
			Name:      "SQLPLUS custom select sql",
			Payload:   []byte{0, 254, 0, 0, 6, 0, 0, 0, 0, 0, 3, 94, 13, 97, 128, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 48, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 13, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 115, 101, 108, 101, 99, 116, 32, 42, 32, 102, 114, 111, 109, 32, 120, 101, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			Result:    "select * from xe",
			ResultRaw: []byte("select * from xe"),
		},
		{
			Name:      "Navicat 16 Alter ddl",
			Payload:   []byte{1, 42, 0, 0, 6, 0, 0, 0, 0, 0, 17, 105, 103, 254, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 2, 0, 0, 0, 3, 94, 104, 33, 129, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 123, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 13, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 65, 76, 84, 69, 82, 32, 83, 69, 83, 83, 73, 79, 78, 32, 83, 69, 84, 32, 67, 85, 82, 82, 69, 78, 84, 95, 83, 67, 72, 69, 77, 65, 32, 61, 32, 115, 121, 115, 116, 101, 109, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			Result:    "ALTER SESSION SET CURRENT_SCHEMA = system",
			ResultRaw: []byte("ALTER SESSION SET CURRENT_SCHEMA = system"),
		},

		{
			Name:      "Navicat 16 select sql",
			Payload:   []byte{1, 177, 0, 0, 6, 0, 0, 0, 0, 0, 17, 105, 83, 254, 255, 255, 255, 255, 255, 255, 255, 1, 0, 0, 0, 3, 0, 0, 0, 3, 94, 84, 97, 129, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 4, 2, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 13, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 64, 83, 69, 76, 69, 67, 84, 32, 67, 46, 84, 65, 66, 76, 69, 95, 78, 65, 77, 69, 44, 32, 67, 46, 67, 79, 76, 85, 77, 78, 95, 78, 65, 77, 69, 44, 32, 67, 46, 79, 87, 78, 69, 82, 32, 70, 82, 79, 77, 32, 34, 83, 89, 83, 34, 46, 34, 65, 76, 76, 95, 84, 65, 66, 95, 64, 67, 79, 76, 85, 77, 78, 83, 34, 32, 67, 32, 87, 72, 69, 82, 69, 32, 67, 46, 79, 87, 78, 69, 82, 32, 61, 32, 39, 67, 84, 88, 83, 89, 83, 39, 32, 65, 78, 68, 32, 67, 46, 84, 65, 66, 76, 69, 95, 78, 65, 77, 69, 32, 61, 32, 39, 68, 82, 36, 73, 78, 68, 69, 88, 44, 95, 83, 69, 84, 39, 32, 79, 82, 68, 69, 82, 32, 66, 89, 32, 67, 46, 84, 65, 66, 76, 69, 95, 78, 65, 77, 69, 44, 32, 67, 46, 67, 79, 76, 85, 77, 78, 95, 73, 68, 32, 65, 83, 67, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			Result:    `SELECT C.TABLE_NAME, C.COLUMN_NAME, C.OWNER FROM "SYS"."ALL_TAB_@COLUMNS" C WHERE C.OWNER = 'CTXSYS' AND C.TABLE_NAME = 'DR$INDEX,_SET' ORDER BY C.TABLE_NAME, C.COLUMN_ID ASC`,
			ResultRaw: []byte(`SELECT C.TABLE_NAME, C.COLUMN_NAME, C.OWNER FROM "SYS"."ALL_TAB_@COLUMNS" C WHERE C.OWNER = 'CTXSYS' AND C.TABLE_NAME = 'DR$INDEX,_SET' ORDER BY C.TABLE_NAME, C.COLUMN_ID ASC`),
		},
	}

	for _, c := range cases {
		t.Logf("Testing %s", c.Name)
		result, err := parser(c.Payload)
		if err != nil {
			t.Fatal(err)
		}
		assert.Equal(t, int(binary.BigEndian.Uint16(c.Payload[0:2])), len(c.Payload))
		assert.Equal(t, c.Result, string(result))
		assert.Equal(t, c.ResultRaw, result)
	}
}

func parser(payload []byte) ([]byte, error) {
	// 确保 payload 至少包含 header 的长度
	if len(payload) < 8 {
		return nil, errors.New("payload过短")
	}

	// 使用大端序从前两个字节读取帧的长度
	frameLength := int(binary.BigEndian.Uint16(payload[:2]))
	if frameLength != len(payload) {
		return nil, errors.New("帧长度错误")
	}

	// 检查帧是否包含 SQL 负载（byte[4] 应该非零）
	if payload[4] == 0 {
		return nil, errors.New("帧未包含 SQL 负载")
	}

	// 在 header 之后开始搜索 SQL 负载
	sqlPayloadStartIndex := 8 // 在 8 字节 header 之后开始

	// 尝试找到 SQL 语句的起始位置
	found := false
	var keywordStart int
	// 关键字列表，用于确定 SQL 语句的起始位置
	keywords := []string{"SELECT", "ALTER", "select", "alter"} // 可以根据需要添加更多关键字
	for sqlPayloadStartIndex < len(payload) && !found {
		for _, keyword := range keywords {
			// 检查是否以关键字开头
			if strings.HasPrefix(string(payload[sqlPayloadStartIndex:]), keyword) {
				found = true
				keywordStart = sqlPayloadStartIndex
				break
			}
		}
		// 如果没有找到关键字，移动到下一个字节继续检查
		if !found {
			sqlPayloadStartIndex++
		}
	}

	// 如果没有找到 SQL 语句，返回错误
	if !found {
		return nil, errors.New(" payload 中没有发现 SQL 语句")
	}

	// 从找到的关键字起始位置提取 SQL 负载直到 payload 结束
	sqlPayload := payload[keywordStart:]

	// 可选地，在第一个非可打印字符处截断负载
	endIndex := len(sqlPayload)
	for i, b := range sqlPayload {
		// 检查是否为非可打印字符
		if b < 32 || b > 126 {
			endIndex = i
			break
		}
	}

	// 返回提取的 SQL 负载
	return sqlPayload[:endIndex], nil
}
